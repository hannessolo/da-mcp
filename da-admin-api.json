{
  "openapi": "3.1.0",
  "info": {
    "version": "1.0-RC",
    "title": "DA Admin API",
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "x-logo": {
      "url": "https://raw.githubusercontent.com/auniverseaway/da-admin/main/docs/openapi/img/da-logo.png"
    },
    "description": "DA Admin API is used to manage Document Authoring content repositories.\n"
  },
  "servers": [
    {
      "url": "https://admin.da.live"
    }
  ],
  "components": {
    "securitySchemes": {
      "bearer": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "parameters": {
      "orgParam": {
        "name": "org",
        "in": "path",
        "description": "The organization.",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "repoParam": {
        "name": "repo",
        "in": "path",
        "description": "Name of the repository.",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "pathParam": {
        "name": "path",
        "in": "path",
        "description": "Path to the source content.",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "extReqParam": {
        "name": "ext",
        "in": "path",
        "description": "The source content file extension.",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "extParam": {
        "name": "ext",
        "in": "path",
        "description": "The source content file extension.",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "guidParam": {
        "name": "guid",
        "in": "path",
        "description": "GUID of the version source.",
        "required": true,
        "schema": {
          "type": "string"
        }
      }
    },
    "schemas": {
      "aemDoc": {
        "description": "Document-based HTML",
        "type": "string"
      },
      "aemSheet": {
        "description": "The basic schema of sheet-based JSON",
        "properties": {
          "total": {
            "description": "The total number of entries available.",
            "type": "number"
          },
          "limit": {
            "description": "The pagination rule to limit entries by.",
            "type": "number"
          },
          "offset": {
            "description": "The offset count of the paginated data.",
            "type": "number"
          },
          "data": {
            "description": "An array objects where each object represents a row in the sheet.",
            "type": "array",
            "items": {
              "type": "object",
              "description": "An object representing a row of data.",
              "properties": {
                "key": {
                  "description": "The heading of the column.",
                  "type": "string",
                  "format": "any"
                },
                "value": {
                  "description": "The value of the row for the associated column.",
                  "type": "string",
                  "format": "any"
                }
              }
            }
          },
          ":type": {
            "description": "The type of sheet. This is either sheet or multi-sheet",
            "type": "string"
          }
        }
      },
      "source": {
        "description": "Create a content source.",
        "properties": {
          "data": {
            "description": "The content to store at the specified location.",
            "type": "blob"
          }
        }
      },
      "sourceInfo": {
        "required": [
          "source"
        ],
        "properties": {
          "source": {
            "description": "Information about a Dark Alley resource.",
            "allOf": [
              {
                "required": [
                  "editUrl",
                  "viewUrl",
                  "status"
                ]
              },
              {
                "properties": {
                  "editUrl": {
                    "description": "The edit URL of the resource.",
                    "type": "string",
                    "format": "url"
                  },
                  "viewUrl": {
                    "description": "The view URL of the resource. For a site, used in AEM fstab.yaml.",
                    "type": "string",
                    "format": "url"
                  },
                  "status": {
                    "description": "HTTP status response of the requested resource.",
                    "type": "number"
                  },
                  "props": {
                    "description": "An object with key/value pairs.",
                    "type": "object"
                  },
                  "error": {
                    "description": "Error message when there was a problem."
                  }
                }
              }
            ]
          }
        }
      },
      "aemInfo": {
        "required": [
          "aem"
        ],
        "properties": {
          "aem": {
            "description": "Information about the AEM resource.",
            "type": "object",
            "allOf": [
              {
                "required": [
                  "previewUrl",
                  "liveUrl"
                ]
              },
              {
                "properties": {
                  "previewUrl": {
                    "description": "The AEM Preview URL.",
                    "type": "string",
                    "format": "url"
                  },
                  "liveUrl": {
                    "description": "The AEM Live URL.",
                    "type": "string",
                    "format": "url"
                  }
                }
              }
            ]
          }
        }
      },
      "copy-source": {
        "properties": {
          "destination": {
            "description": "The destination path of the copy.",
            "type": "string"
          }
        }
      },
      "move-source": {
        "properties": {
          "destination": {
            "description": "The destination path of the move.",
            "type": "string"
          }
        }
      },
      "sourceList": {
        "required": [
          "sources"
        ],
        "properties": {
          "sources": {
            "description": "List of sources",
            "type": "array",
            "items": {
              "required": [
                "editUrl",
                "contentUrl"
              ],
              "type": "object",
              "properties": {
                "editUrl": {
                  "description": "The edit URL of the resource.",
                  "type": "string",
                  "format": "url"
                },
                "contentUrl": {
                  "description": "The content URL of the resource. For a site, used in AEM fstab.yaml.",
                  "type": "string",
                  "format": "url"
                },
                "props": {
                  "description": "The properties associated with the source.",
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "version-list": {
        "required": [
          "versions"
        ],
        "description": "List of audits and sources.",
        "type": "array",
        "items": {
          "required": [
            "path",
            "timestamp",
            "users"
          ],
          "type": "object",
          "properties": {
            "timestamp": {
              "description": "The unix timestamp of when the version or audit was created.",
              "type": "number",
              "format": "number"
            },
            "url": {
              "description": "The DA Admin path of the version.",
              "type": "string",
              "format": "url"
            },
            "path": {
              "description": "The path of the source associated with the version or audit.",
              "type": "string",
              "format": "url"
            },
            "users": {
              "description": "The uses associated with the audit or version.",
              "items": {
                "type": "object",
                "description": "An object representing a row of data.",
                "properties": {
                  "email": {
                    "description": "The email address of the user.",
                    "type": "string",
                    "format": "any"
                  }
                }
              }
            }
          }
        }
      }
    },
    "responses": {
      "200": {
        "description": "The source content",
        "content": {
          "text/html": {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/aemDoc"
                }
              ]
            },
            "examples": {
              "html": {
                "value": "<body>\n  <header></header>\n  <main>\n    <div></div>\n  </main>\n</body>\n"
              }
            }
          },
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/aemSheet"
                }
              ]
            }
          },
          "image/png": {
            "schema": {
              "type": "binary"
            }
          },
          "image/jpg": {
            "schema": {
              "type": "binary"
            }
          },
          "application/pdf": {
            "schema": {
              "type": "binary"
            }
          },
          "image/svg+xml": {
            "schema": {
              "type": "xml"
            }
          }
        }
      },
      "201": {
        "description": "Source created successfully.",
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/sourceInfo"
                },
                {
                  "$ref": "#/components/schemas/aemInfo"
                }
              ]
            },
            "examples": {
              "success": {
                "value": {
                  "source": {
                    "editUrl": "https://da.live/edit#/adobecom/blog/my-cool-post",
                    "contentUrl": "https://content.da.live/adobecom/blog/my-cool-post",
                    "status": 201,
                    "props": {
                      "readyForLoc": true,
                      "lastRollout": "Wed, 29 Nov 2023 01:20:40 GMT"
                    }
                  },
                  "aem": {
                    "previewUrl": "https://main--blog--adobecom.hlx.page/my-cool-post",
                    "liveUrl": "https://main--blog--adobecom.hlx.live/my-cool-post"
                  }
                }
              }
            }
          }
        }
      },
      "204": {
        "description": "The request was completed successfully."
      },
      "400": {
        "description": "Invalid request.",
        "headers": {
          "X-Error": {
            "$ref": "#/components/headers/xError"
          }
        }
      },
      "401": {
        "description": "Not authenticated."
      },
      "404": {
        "description": "Resource not found.",
        "headers": {
          "X-Error": {
            "$ref": "#/components/headers/xError"
          }
        }
      },
      "500": {
        "description": "Operation failed due to an internal error.",
        "headers": {
          "X-Error": {
            "$ref": "#/components/headers/xError"
          }
        }
      },
      "list-200": {
        "description": "The list of sources",
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/sourceList"
                }
              ]
            }
          }
        }
      },
      "version-list-200": {
        "description": "The list of audits and versions.",
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/version-list"
                }
              ]
            }
          }
        }
      }
    },
    "headers": {
      "xError": {
        "description": "A short descriptive error message",
        "schema": {
          "format": "none",
          "type": "string"
        }
      }
    },
    "examples": {
      "copySourceForm": {
        "summary": null,
        "value": "destination: '/aemsites/geometrixx/path/to/file.html'\n"
      }
    }
  },
  "security": [
    {
      "bearer": []
    }
  ],
  "tags": [
    {
      "name": "Source",
      "description": "The `source` API allows you to work directly with your content sources (Docs, Sheets, Media).\n"
    },
    {
      "name": "Copy",
      "description": "The `copy` API allows you to copy a **directory** or **source**.\n"
    },
    {
      "name": "Move",
      "description": "The `move` API allows you to move a **directory** or **source**.\n"
    },
    {
      "name": "Version",
      "description": "The `versionsource` and `versionlist` APIs allow you to work with versions of source documents and sheets.\n"
    },
    {
      "name": "List",
      "description": "The `list` API will list children of a directory.\n"
    },
    {
      "name": "Config",
      "description": "The `config` API will allow you to associate sheet-formatted configurations with orgs, sites, directories, documents, and sheets.\n"
    }
  ],
  "paths": {
    "/source/{org}/{repo}/{path}": {
      "get": {
        "operationId": "sourceDetails",
        "tags": [
          "Source"
        ],
        "summary": "Get source content",
        "description": "Get a content **source** from an organization.",
        "parameters": [
          {
            "$ref": "#/components/parameters/orgParam"
          },
          {
            "$ref": "#/components/parameters/repoParam"
          },
          {
            "$ref": "#/components/parameters/pathParam"
          },
          {
            "$ref": "#/components/parameters/extReqParam"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/200"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "operationId": "createSource",
        "tags": [
          "Source"
        ],
        "summary": "Create source content",
        "description": "Create a content **source** within an organization.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/orgParam"
          },
          {
            "$ref": "#/components/parameters/repoParam"
          },
          {
            "$ref": "#/components/parameters/pathParam"
          },
          {
            "$ref": "#/components/parameters/extReqParam"
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/source"
              },
              "examples": {
                "multipart": {
                  "$ref": "#/components/examples/copySourceForm"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/201"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "operationId": "sourceDelete",
        "tags": [
          "Source"
        ],
        "summary": "Delete source content",
        "description": "Delete the content **source** or **directory**.",
        "parameters": [
          {
            "$ref": "#/components/parameters/orgParam"
          },
          {
            "$ref": "#/components/parameters/repoParam"
          },
          {
            "$ref": "#/components/parameters/pathParam"
          },
          {
            "$ref": "#/components/parameters/extParam"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/204"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/copy/{org}/{repo}/{path}": {
      "post": {
        "operationId": "copySource",
        "tags": [
          "Copy"
        ],
        "summary": "Copy source content",
        "description": "Copy a content source within an organization.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/orgParam"
          },
          {
            "$ref": "#/components/parameters/repoParam"
          },
          {
            "$ref": "#/components/parameters/pathParam"
          },
          {
            "$ref": "#/components/parameters/extParam"
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/copy-source"
              },
              "examples": {
                "multipart": {
                  "$ref": "#/components/examples/copySourceForm"
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/204"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/move/{org}/{repo}/{path}": {
      "post": {
        "operationId": "moveSource",
        "tags": [
          "Move"
        ],
        "summary": "Move source content",
        "description": "Move a content source within an organization.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/orgParam"
          },
          {
            "$ref": "#/components/parameters/repoParam"
          },
          {
            "$ref": "#/components/parameters/pathParam"
          },
          {
            "$ref": "#/components/parameters/extParam"
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/move-source"
              },
              "examples": {
                "multipart": {
                  "$ref": "#/components/examples/copySourceForm"
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/204"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/list/{org}/{repo}/{path}": {
      "get": {
        "operationId": "listDetails",
        "tags": [
          "List"
        ],
        "summary": "List sources",
        "description": "Returns a list of sources from an organization.",
        "parameters": [
          {
            "$ref": "#/components/parameters/orgParam"
          },
          {
            "$ref": "#/components/parameters/repoParam"
          },
          {
            "$ref": "#/components/parameters/pathParam"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/list-200"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/versionsource/{org}/{repo}/{guid}": {
      "get": {
        "operationId": "versionSource",
        "tags": [
          "Version"
        ],
        "summary": "Get source version",
        "description": "Returns version of a given source.",
        "parameters": [
          {
            "$ref": "#/components/parameters/orgParam"
          },
          {
            "$ref": "#/components/parameters/repoParam"
          },
          {
            "$ref": "#/components/parameters/guidParam"
          },
          {
            "$ref": "#/components/parameters/extReqParam"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/200"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/versionsource/{org}/{repo}/{path}": {
      "post": {
        "operationId": "versionCreateSource",
        "tags": [
          "Version"
        ],
        "summary": "Create source version",
        "description": "Create a version of a given source.",
        "parameters": [
          {
            "$ref": "#/components/parameters/orgParam"
          },
          {
            "$ref": "#/components/parameters/repoParam"
          },
          {
            "$ref": "#/components/parameters/pathParam"
          },
          {
            "$ref": "#/components/parameters/extReqParam"
          }
        ],
        "responses": {
          "200": {
            "$ref": "./responses.yaml#/200-list"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/versionlist/{org}/{repo}/{path}": {
      "get": {
        "operationId": "versionList",
        "tags": [
          "Version"
        ],
        "summary": "List source versions",
        "description": "Returns a list of versions for a given source.",
        "parameters": [
          {
            "$ref": "#/components/parameters/orgParam"
          },
          {
            "$ref": "#/components/parameters/repoParam"
          },
          {
            "$ref": "#/components/parameters/pathParam"
          },
          {
            "$ref": "#/components/parameters/extReqParam"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/version-list-200"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/config/{org}/{repo}/{path}": {
      "get": {
        "operationId": "getConfig",
        "tags": [
          "Config"
        ],
        "summary": "Config",
        "description": "Get a config for an org, repo, or source.",
        "parameters": [
          {
            "$ref": "#/components/parameters/pathParam"
          }
        ],
        "responses": {
          "200": {
            "$ref": "./responses.yaml#/200"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      },
      "post": {
        "operationId": "createConfig",
        "tags": [
          "Config"
        ],
        "summary": "New config",
        "description": "Create a config for an org, repo, or source.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/pathParam"
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/source"
              },
              "examples": {
                "json": {
                  "$ref": "#/components/examples/copySourceForm"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/201"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    }
  }
}